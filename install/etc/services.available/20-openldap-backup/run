#!/usr/bin/with-contenv bash

source /assets/functions/00-container
prepare_service defaults 10-openldap
PROCESS_NAME="openldap-backup"
check_container_initialized
check_service_initialized init 10-openldap
liftoff

if [ "${BACKUP_LOCATION}" = "s3" ] || [ "${BACKUP_LOCATION}" = "minio" ]; then
    transform_file_var \
                    S3_BUCKET \
                    S3_KEY_ID \
                    S3_KEY_SECRET \
                    S3_KEY_PATH \
                    S3_KEY_REGION \
                    S3_PROTOCOL
fi

### Set Compression Options
if var_true "${BACKUP_PARALLEL_COMPRESSION}"; then
    bzip="pbzip2 -${BACKUP_COMPRESSION_LEVEL}"
    gzip="pigz -${BACKUP_COMPRESSION_LEVEL}"
    xzip="pixz -${BACKUP_COMPRESSION_LEVEL}"
    zstd="zstd --rm -${BACKUP_COMPRESSION_LEVEL}"
else
    bzip="bzip2 -${BACKUP_COMPRESSION_LEVEL}"
    gzip="gzip -${BACKUP_COMPRESSION_LEVEL}"
    xzip="xz -${BACKUP_COMPRESSION_LEVEL} "
    zstd="zstd --rm -${BACKUP_COMPRESSION_LEVEL}"
fi

backup_openldap() {
    print_notice "Backing up configuration schemas"
    target=config
    /usr/sbin/slapcat -F "${CONFIG_PATH}"/slapd.d -n 0  > "${BACKUP_TEMP_LOCATION}"/"${target}"
    exit_code=$?
    check_exit_code $target
    print_notice "Backing up user data"
    target=data
    /usr/sbin/slapcat -F "${CONFIG_PATH}"/slapd.d -n 1 > "${BACKUP_TEMP_LOCATION}"/"${target}"
    exit_code=$?
    check_exit_code $target
    target=${now}-openldap_${CONTAINER_NAME}
    compression
    generate_checksum
    move_backup
}

check_exit_code() {
    print_debug "OpenLDAP Backup Exit Code is ${exit_code}"
    case "${exit_code}" in
    0)
        print_info "OpenLDAP Backup of '${1}' completed successfully"
        ;;
    *)
        print_error "OpenLDAP Backup of '${1}' reported errors"
        master_exit_code=1
        ;;
    esac
}

compression() {
    case "${BACKUP_COMPRESSION,,}" in
    bz*)
        print_notice "Compressing backup with bzip2"
        target=${target}.tar.bz2
        tar --use-compress-program="${bzip} " -cf "${BACKUP_TEMP_LOCATION}"/"${target}" -C "${BACKUP_TEMP_LOCATION}" config data --transform "s|config|${now}-openldap_${CONTAINER_NAME}/config|" --transform "s|data|${now}-openldap_${CONTAINER_NAME}/data|"
        ;;
    gz*)
        print_notice "Compressing backup with gzip"
        target=${target}.tar.gz
        tar --use-compress-program="${gzip} " -cf "${BACKUP_TEMP_LOCATION}"/"${target}" -C "${BACKUP_TEMP_LOCATION}" config data --transform "s|config|${now}-openldap_${CONTAINER_NAME}/config|" --transform "s|data|${now}-openldap_${CONTAINER_NAME}/data|"
        ;;
    "none" | "false")
        target=${target}.tar
        tar -cf "${BACKUP_TEMP_LOCATION}"/"${target}" -C "${BACKUP_TEMP_LOCATION}" config data --transform "s|config|${now}-openldap_${CONTAINER_NAME}/config|" --transform "s|data|${now}-openldap_${CONTAINER_NAME}/data|"
        ;;
    xz*)
        print_notice "Compressing backup with xzip"
        target=${target}.tar.xz
        tar --use-compress-program="${xzip} " -cf "${BACKUP_TEMP_LOCATION}"/"${target}" -C "${BACKUP_TEMP_LOCATION}" config data --transform "s|config|${now}-openldap_${CONTAINER_NAME}/config|" --transform "s|data|${now}-openldap_${CONTAINER_NAME}/data|"
        ;;
    zst*)
        print_notice "Compressing backup with zstd"
        target=${target}.tar.zst
        tar --use-compress-program="${zstd} " -cf "${BACKUP_TEMP_LOCATION}"/"${target}" -C "${BACKUP_TEMP_LOCATION}" config data --transform "s|config|${now}-openldap_${CONTAINER_NAME}/config|" --transform "s|data|${now}-openldap_${CONTAINER_NAME}/data|"
        ;;
    esac
}

generate_checksum() {
    if var_true "${BACKUP_ENABLE_CHECKSUM}"; then
        if [ "${exit_code}" = "0" ]; then
            case "${BACKUP_CHECKSUM,,}" in
            "md5")
                checksum_command="md5sum"
                checksum_extension="md5"
                ;;
            sha*)
                checksum_command="sha1sum"
                checksum_extension="sha1"
                ;;
            esac

            print_notice "Generating ${checksum_extension^^} for '${target}'"
            cd "${BACKUP_TEMP_LOCATION}"
            ${checksum_command} "${target}" >"${target}"."${checksum_extension}"
            checksum_value=$(${checksum_command} "${target}" | awk ' { print $1}')
            print_debug "${checksum_extension^^}: ${checksum_value} - ${target}"
        else
            print_error "Skipping Checksum creation because backup did not complete successfully"
        fi
    fi
}

move_backup() {
    case "${BACKUP_SIZE_VALUE,,}" in
    "b" | "bytes")
        BACKUP_SIZE_VALUE=1
        ;;
    "[kK]" | "[kK][bB]" | "kilobytes" | "[mM]" | "[mM][bB]" | "megabytes")
        BACKUP_SIZE_VALUE="-h"
        ;;
    *)
        BACKUP_SIZE_VALUE=1
        ;;
    esac
    if [ "$BACKUP_SIZE_VALUE" = "1" ]; then
        FILESIZE="$(stat -c%s "${BACKUP_TEMP_LOCATION}"/"${target}")"
        print_notice "Backup of ${target} created with the size of ${FILESIZE} bytes"
    else
        FILESIZE=$(du -h "${BACKUP_TEMP_LOCATION}"/"${target}" | awk '{ print $1}')
        print_notice "Backup of ${target} created with the size of ${FILESIZE}"
    fi

    case "${BACKUP_TYPE,,}" in
        file* )
            mkdir -p "${BACKUP_PATH}"
            silent mv "${BACKUP_TEMP_LOCATION}"/*."${checksum_extension}" "${BACKUP_PATH}"/
            mv "${BACKUP_TEMP_LOCATION}"/"${target}" "${BACKUP_PATH}"/"${target}"
            if var_true "${BACKUP_CREATE_LATEST_SYMLINK}"; then
                ln -sf "${BACKUP_PATH}"/"${target}" "${BACKUP_PATH}"/latest-openldap_"${CONTAINER_NAME}"
            fi
            if [ -n "${BACKUP_ARCHIVE_TIME}" ]; then
                mkdir -p "${BACKUP_PATH_ARCHIVE}"
                find "${BACKUP_PATH}"/ -maxdepth 1 -mmin +"${BACKUP_ARCHIVE_TIME}" -iname "*" -exec mv {} "${BACKUP_PATH_ARCHIVE}" \;
            fi
        ;;
        "s3" | "minio")
            export AWS_ACCESS_KEY_ID=${S3_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${S3_KEY_SECRET}
            export AWS_DEFAULT_REGION=${S3_REGION}

            [[ (-n "${S3_HOST}") ]] && PARAM_AWS_ENDPOINT_URL=" --endpoint-url ${S3_PROTOCOL}://${S3_HOST}"

            aws ${PARAM_AWS_ENDPOINT_URL} s3 cp ${TEMP_LOCATION}/${target} s3://${S3_BUCKET}/${S3_PATH}/${target}

            silent rm -rf "${BACKUP_TEMP_LOCATION}"/"${checksum_extension}"
            rm -rf "${BACKUP_TEMP_LOCATION}"/"${target}"
        ;;
    esac
            rm -rf "${BACKUP_TEMP_LOCATION}"/config
            rm -rf "${BACKUP_TEMP_LOCATION}"/data
}

if [ "${MODE,,}" = "manual" ] || [ "${1,,}" = "manual" ] || [ "${1,,}" = "now" ]; then
    sleep 1
    BACKUP_BEGIN=+0
    manual=TRUE
    print_debug "Detected Manual Mode"
else
    sleep 5
    current_time=$(date +"%s")
    today=$(date +"%Y%m%d")

    if [[ $BACKUP_BEGIN =~ ^\+(.*)$ ]]; then
        waittime=$((${BASH_REMATCH[1]} * 60))
        target_time=$(($current_time + $waittime))
    else
        target_time=$(date --date="${today}${BACKUP_BEGIN}" +"%s")
        if [[ "$target_time" < "$current_time" ]]; then
            target_time=$(($target_time + 24 * 60 * 60))
        fi
        waittime=$(($target_time - $current_time))
    fi

    print_debug "Wait Time: ${waittime} Target time: ${target_time} Current Time: ${current_time}"
    print_notice "Next Backup at $(date -d @${target_time} +"%Y-%m-%d %T %Z")"
    sleep $waittime
fi

### Commence Backup
while true; do
    mkdir -p "${BACKUP_TEMP_LOCATION}"
    backup_start_time=$(date +"%s")
    print_debug "Backup routines started time: $(date +'%Y-%m-%d %T %Z')"
    now=$(date +"%Y%m%d-%H%M%S")
    now_time=$(date +"%H:%M:%S")
    now_date=$(date +"%Y-%m-%d")
    backup_openldap
    backup_finish_time=$(date +"%s")
    backup_total_time=$(echo $((backup_finish_time - backup_start_time)))
    if [ -z "$master_exit_code" ]; then master_exit_code="0"; fi
    print_info "Backup routines finish time: $(date -d @${backup_finish_time} +"%Y-%m-%d %T %Z") with overall exit code ${master_exit_code}"
    print_notice "Backup routines time taken: $(echo ${backup_total_time} | awk '{printf "Hours: %d Minutes: %02d Seconds: %02d", $1/3600, ($1/60)%60, $1%60}')"

    ### Zabbix
    if var_true "${CONTAINER_ENABLE_MONITORING}"; then
        print_notice "Sending Backup Statistics to Zabbix"
        silent zabbix_sender -c /etc/zabbix/zabbix_agentd.conf -k openldap.backup.size -o "$(stat -c%s "${BACKUP_PATH}"/"${target}")"
        silent zabbix_sender -c /etc/zabbix/zabbix_agentd.conf -k openldap.backup.datetime -o "$(date -r "${BACKUP_PATH}"/"${target}" +'%s')"
    fi

    ### Automatic Cleanup
    if [[ -n "${BACKUP_RETENTION}" ]]; then
        print_notice "Cleaning up old backups"
        find "${BACKUP_PATH}"/ -mmin +"${BACKUP_RETENTION}" -iname "*" -exec rm {} \;
    fi

    ### Post Backup Custom Script Support
    if [ -n "${POST_SCRIPT}" ]; then
        print_notice "Found POST_SCRIPT environment variable. Executing"
        eval "${POST_SCRIPT}"
    fi

    if [ -d /assets/custom-backup-scripts/ ]; then
        print_notice "Found Custom Scripts to Execute"
        for f in $(find /assets/custom-backup-scripts/ -name \*.sh -type f); do
            print_notice "Running Script ${f}"
            ## script DATE TIME BACKUP_FILENAME FILESIZE CHECKSUM VALUE
            ${f} "${now_date}" "${now_time}" "${target}" "${FILESIZE}" ${checksum_value}
        done
    fi

    ### Go back to Sleep until next Backup time
    if var_true "${manual}"; then
        print_debug "Exiting due to manual mode"
        exit ${master_exit_code}
    else
        print_notice "Sleeping for another $(($BACKUP_INTERVAL * 60 - backup_total_time)) seconds. Waking up at $(date -d@"$(($(date +%s) + $(($BACKUP_INTERVAL * 60 - backup_total_time))))" +"%Y-%m-%d %T %Z") "
        sleep $(($BACKUP_INTERVAL * 60 - backup_total_time))
    fi
done
